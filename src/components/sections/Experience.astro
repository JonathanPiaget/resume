---
import Section from "../Section.astro";
import { work } from "@cv";
import { Icon } from "astro-icon/components";
---

<Section className={Astro.props.className} title="Experience">
  <ul class="flex flex-col">
    {
      work.map(
        ({
          name,
          startDate,
          endDate,
          position,
          summary,
          url,
          location,
          location_type,
        }) => {
          const startYear = new Date(startDate).getFullYear();
          const endYear =
            endDate != null ? new Date(endDate).getFullYear() : "Present";

          return (
            <li class="relative print:py-2">
              <div
                data-expanded="false"
                class="expand-container group relative grid pb-1 transition-all sm:grid-cols-12 sm:gap-8 md:gap-6 lg:hover:!opacity-100 print:grid-cols-1 print:gap-1 print:pb-0"
              >
                <header class="relative mt-1 text-xs font-semibold sm:col-span-2">
                  <time datetime={startDate} data-title={startDate}>
                    {startYear}
                  </time>{" "}
                  -{" "}
                  <time datetime={endDate} data-title={endDate}>
                    {endYear}
                  </time>
                </header>
                <div class="relative flex flex-col pb-6 before:absolute before:-ml-6 before:mt-2 before:h-full before:w-px before:bg-skin-muted sm:col-span-10 print:pb-0 print:before:hidden">
                  <div class="absolute mt-2 h-2 w-2 -translate-x-[1.71rem] rounded-full bg-skin-muted ring ring-skin-fill print:hidden" />
                  <h3>
                    <div
                      class="group/link inline-flex items-center text-lg leading-tight focus-visible:text-amber-500 print:text-base"
                      aria-label="{position} - {company}"
                    >
                      <span>
                        {position} <span>@</span>
                        {url ? (
                          <a
                            class="text-skin-hue"
                            href={url}
                            title={`Ver ${name}`}
                            target="_blank"
                          >
                            {name}
                          </a>
                        ) : (
                          <span>{name}</span>
                        )}
                        {url && (
                          <span class="inline-block text-skin-hue print:[&>svg]:hidden">
                            <Icon
                              name="ri:arrow-up-line"
                              class="ml-1 inline-block h-4 w-4 shrink-0 translate-y-px rotate-45 transition-transform group-hover/link:-translate-y-1 group-hover/link:translate-x-1 group-focus-visible/link:-translate-y-1 group-focus-visible/link:translate-x-1 motion-reduce:transition-none"
                              aria-hidden="true"
                            />
                          </span>
                        )}
                      </span>
                    </div>
                  </h3>
                  {(location || location_type) && (
                    <div class="text-xs text-skin-muted">
                      {location} {location && location_type && "-"}{" "}
                      {location_type}
                    </div>
                  )}
                  <div class="mt-4 flex flex-col gap-4 text-sm print:gap-0 print:text-xs">
                    {summary && (
                      <div class="flex flex-col gap-1">
                        <h4>Summary:</h4>
                        <ul class="flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4">
                          {Array.isArray(summary) ? (
                            summary.map((item) => ({ item }))
                          ) : (
                            <li>{summary}</li>
                          )}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </li>
          );
        },
      )
    }
  </ul>
</Section>
<script>
  const expandButton = document.querySelectorAll(".expand-button");

  expandButton.forEach((button) => {
    button.addEventListener("click", () => {
      const container = button.closest<HTMLElement>(".expand-container")!;
      container.dataset.expanded =
        container.dataset.expanded === "true" ? "false" : "true";
      const expandText = button.querySelector(".expand-text")!;
      expandText.innerHTML =
        container.dataset.expanded === "true" ? "Show less" : "Show more";
    });
  });
</script>

<style>
  li::marker {
    @apply text-skin-hue;
  }
</style>
